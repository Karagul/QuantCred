CDS Pricing
===========

QuantCred provides functionality for pricing credit default swaps
(CDS's).

A CDS is a contract consisting of two parts ("legs"):

1. An annuity paid by the protection seller until the named creditor
   defaults. This is known as a "risky annuity".
2. A payment paid by the protection seller when the named creditor
   default.

Every CDS also has a maturity :math:`T`. Both legs of the CDS are
cancelled at this time. 

The value of a CDS is the difference between these two legs.

Payments until default
----------------------

Suppose a continuous risky annuity is given at a rate of one unit of
currency per year. If :math:`Z(t)` is the discount curve related to that
currency and :math:`Q(t)` is the survival curve of the creditor, then
the value ("RPV01") of this risky annuity is given by

.. math:: \text{RPV01} = \int_{0}^{T} Q(t)Z(t) dt.

In QuantCred, this may be calculated with the `RPV01_continuous`
function::

    from math      import exp
    from quantcred import RPV01_continuous

    def expdecay(r, t):
        return exp(-r * t)
    Q = lambda t: expdecay(0.0050, t) # 50 bps hazard rate
    Z = lambda t: expdecay(1.5000, t) # 150 bps interest
    T = 3 # three years until annuity expires
    annuity = RPV01_continuous(Q, Z, T)

In the real world, however, annuities are paid discretely. So suppose
that payments $\Delta_1,\ldots,\Delta_N$ are made at times
$t_1,t_2,\ldots,t_N$ provided that the underlying creditor is solvent.
The value of this annuity is given by

$$\sum_{n=1}^{N} \Delta_n Q(t_n) Z(t_n).$$

We often set $\Delta_n$ to be the time between $t_{n-1}$ and $t_n$
according to some day counting convention. The result of this is that
one unit of currency is paid per year. The corresponding value of the
annuity is a discrete version of the RPV01.

Let the default time be denoted as $\tau$. And let $t_m = \max_{n}(t_n
< \tau)$ be the last payment date before the default. And suppose that
the default happens before the next payment date $t_{m+1}$. An
additional payment is made at $\tau$. This payment is equal to the
time difference between $t_m$ and $\tau$. This is an accruel payment.

The discrete RPV01 must be adjusted to accomidated the accrued premium
paid at default. The adjusted RPV01 is given by

$$\sum_{n} \Delta_n Z(t_n) \frac{Q(t_n)+Q(t_{n-2})}{2}.$$

This is equivalent to a trapezoidal approximation of the continuous
RPV01 with $(t_n,t_{n-1})$ forming the subintervals of integration.

Quantcred provides an RPV01 function for discrete payments. As with the
continuous version, this function requires $Q$, $Z$ and $T$ as input.
However, it also requires one to input a payment schedule (a list of
floats) as well::

    from quantcred import RPV01_discrete
    
    payment_schedule = [0.5 * i for i in range(7)] #semi-annual payments
    annuity = RPV01_discrete(Q,Z,T, payment_schedule)

The day-counting function is calculated under Actual/Actual conventions.


